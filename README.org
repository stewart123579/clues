#+hugo_base_dir: .
#+TITLE: clues - Common Lisp Useful(?) Examples/Exemplars
#+AUTHOR: Stewart V. Wright
#+DATE: 2022/05/07
#+LASTMOD: 2022/05/07
#+EMAIL: stewart@vifortech.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t
# #+OPTIONS:   tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:   num

#+begin_quote
Hopefully they're useful!
#+end_quote

This repo will contain examples (and exemplars) of what I think is useful lisp
code. It will mainly be [[https://common-lisp.net/][common]] [[https://lisp-lang.org/][lisp]], but [[https://www.gnu.org/software/emacs/documentation.html][emacs lisp]] may also appear, and I guess
any other lisp-y type languages (i.e. scheme).

The plan is that when I find something useful I will add it to this file in the
Blog Ideas section and then, at some point in the future, I will write it up in
a blog-post style. The blog posts will appear in my blog at
https://stewart123579.github.io/blog/tags/clues

* This file and blogging

I write all of my posts (and almost everything else) using [[https://www.gnu.org/software/emacs/][Emacs]]. In particular
I use [[https://orgmode.org/][Org Mode]], and I've recently discovered the useful [[https://ox-hugo.scripter.co/][ox-hugo]] minor mode to
export the pages using the [[https://gohugo.io/][Hugo]] engine.
** clues
:PROPERTIES:
:EXPORT_HUGO_SECTION: tags/clues
:EXPORT_FILE_NAME: _index
:END:
There are my various CLUEs (Common Lisp Useful Examples/Exemplars) posts.

The orgmode (i.e. text) file that they are generated from is available:
https://github.com/stewart123579/clues
* Posts [2/2]                                                                   :clues:@code:
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: clues
:END:
** Quicklisp
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: quicklisp
:END:
*** DONE Update list of local projects for Quicklisp                          :100daysToOffload:
CLOSED: [2022-05-10 Tue 09:55]
:PROPERTIES:
:EXPORT_FILE_NAME: update-list-of-local-projects
:END:

I always forget how to update the list of local projects for Quicklisp.

#+hugo: more

#+begin_src lisp
  (ql:register-local-projects)
#+end_src

I think I learned about it from [[https://www.darkchestnut.com/2016/quicklisp-load-personal-projects-from-arbitrary-locations/][Wimpie Nortje's post]].
** DONE Loops in Lisp                                                          :100daysToOffload:
CLOSED: [2022-05-03 Tue 21:55]
:PROPERTIES:
:EXPORT_FILE_NAME: loops-in-lisp
:END:
There are two type of lisp coders. Those that *love* the =loop= macro and those
that don't.

#+hugo: more

I'm one of the former.

Take this beautiful construction:

#+begin_src lisp
(loop for item in mylist
      collect (first item) into known-keys
      maximize (second item) into big
      minimize (second item) into small
      finally (return (values known-keys big small)))
#+end_src

Even not knowing what =mylist= was you could guess that =known-keys= would be
the collection of all the first elements of =item=, and =big= and =small= would
be the largest and smallest values in the second part of =item=.

-----

If I told you that =mylist= was a list of items that had two elements, *viz.*

#+begin_src lisp
((a . 3) (b . 2) (c . 1))
#+end_src

You'd be able to guess that the result would be something like

#+begin_src lisp
(a b c)
3
1
#+end_src

-----

=loop= is easy to read and reflects the true strength of common lisp - [[https://en.wikipedia.org/wiki/Domain-specific_language][DSLs]] make
readable (and performant) code easy.
* Blog Ideas    [0/0]                                                          :dont_export_this_blog:
* COMMENT Local Variables                                                       :dont_export_this_blog:
# Local Variables:
# org-hierarchical-todo-statistics: nil
# End:
